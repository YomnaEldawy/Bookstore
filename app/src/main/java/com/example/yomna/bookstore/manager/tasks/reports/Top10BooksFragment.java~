package com.example.yomna.bookstore.manager.tasks.reports;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;

import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.toolbox.Volley;
import com.example.yomna.bookstore.R;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import static android.content.Context.LAYOUT_INFLATER_SERVICE;

public class Top10BooksFragment extends Fragment {
    ListView listView;
    ArrayList<BookSales> bookSales;
    Adapter adapter;
    RelativeLayout top10;
    public Top10BooksFragment() {
        // Required empty public constructor
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View myView = inflater.inflate(R.layout.fragment_top10_books, container, false);
        bookSales = new ArrayList<BookSales>();
        listView = myView.findViewById(R.id.listView_top10);
        getTop10Books(new VolleyCallbackSale() {
    @Override
    public void onSuccess(ArrayList<BookSales> resultBookSales) {
        bookSales = resultBookSales;
       /* Collections.sort(bookSales, new Comparator<BookSales>(){
            public int compare(BookSales s1, BookSales s2) {
                return ((Integer)s1.getTotalSales()).compareTo(s2.getTotalSales());
            }
        });*/
        for(int i=0;i<bookSales.size();i++){
        System.out.println("sale "+bookSales.get(i).getISBNBookSale()+" "+bookSales.get(i).getTotalSales());
        }
        adapter = new Adapter(getActivity().getApplicationContext(), bookSales);
        listView.setAdapter(adapter);

    }

    @Override
    public void onFail(String msg) {

    }
});
/*
        Bitmap screen;
        View v1 = myView.getRootView();
        v1.setDrawingCacheEnabled(true);
        screen= Bitmap.createBitmap(v1.getDrawingCache());
        v1.setDrawingCacheEnabled(false);
         screen= getBitmapFromView(getActivity().getWindow().findViewById(R.id.top10_layout));



        String fpath = "/SD Card/" + "mypdf.pdf";
        File file = new File(fpath);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
        // To customise the text of the pdf
        // we can use FontFamily
        Font bfBold12 = new Font(Font.FontFamily.TIMES_ROMAN,
                12, Font.BOLD, new BaseColor(0, 0, 0));
        Font bf12 = new Font(Font.FontFamily.TIMES_ROMAN,
                12);
        // create an instance of itext document
        Document document = new Document();
        try {
            PdfWriter.getInstance(document,
                    new FileOutputStream(file.getAbsoluteFile()));
        } catch (DocumentException e1) {
            e1.printStackTrace();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
        document.open();
        //using add method in document to insert a paragraph
        try {
            document.add(new Paragraph("My First Pdf !"));
        } catch (DocumentException e1) {
            e1.printStackTrace();
        }
        try {
            document.add(new Paragraph("Hello World"));
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            screen.compress(Bitmap.CompressFormat.PNG, 100, stream);
            byte[] byteArray = stream.toByteArray();
            addImage(document,byteArray);
        } catch (DocumentException e1) {
            e1.printStackTrace();
        }

        // close document
        document.close();
*/

        return myView;
    }
    /*
    public static Bitmap getBitmapFromView(View view) {
        //Define a bitmap with the same size as the view
        Bitmap returnedBitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(),Bitmap.Config.ARGB_8888);
        //Bind a canvas to it
        Canvas canvas = new Canvas(returnedBitmap);
        //Get the view's background
        Drawable bgDrawable =view.getBackground();
        if (bgDrawable!=null)
            //has background drawable, then draw it on the canvas
            bgDrawable.draw(canvas);
        else
            //does not have background drawable, then draw white background on the canvas
            canvas.drawColor(Color.WHITE);
        // draw the view on the canvas
        view.draw(canvas);
        //return the bitmap
        return returnedBitmap;
    }

    private static void addImage(Document document,byte[] byteArray)
    {
        Image image = null;
        try
        {
            image = Image.getInstance(byteArray);
        }
        catch (BadElementException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        catch (MalformedURLException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        catch (IOException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        // image.scaleAbsolute(150f, 150f);
        try
        {
            document.add(image);
        } catch (DocumentException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
*/
    private void getTop10Books(final VolleyCallbackSale onCallback){

        Response.Listener<String> responseListener = new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                try {
                    System.out.println("Response is :" + response);
                    JSONObject jsonResponse = new JSONObject(response);
                    boolean success = jsonResponse.getBoolean("success");
                    if (success) {
                        bookSales = toList(jsonResponse);
                        onCallback.onSuccess(toList(jsonResponse));
                    } else {
                        onCallback.onFail("No Books Found");

                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            }

        };
        getTop10Request r1 = new getTop10Request(responseListener);
        RequestQueue q1 = Volley.newRequestQueue(getActivity());
        q1.add(r1);
    }

    ArrayList<BookSales> toList(JSONObject jsonResponse) {
        ArrayList<BookSales> result = new ArrayList<BookSales>();
        try {
            JSONArray ISBNs = jsonResponse.getJSONArray("Book_ISBN");
            JSONArray titles = jsonResponse.getJSONArray("title");
            JSONArray sales = jsonResponse.getJSONArray("total_sales");
            for(int i = 0;i<ISBNs.length(); i++){
                BookSales b = new BookSales();
                String title = (String) titles.get(i);
                String ISBN = (String) ISBNs.get(i);
                int sale = Integer.parseInt(sales.get(i).toString());
                System.out.println("book "+title+" "+ISBN+" "+sale);
                b.setISBNBookSale(ISBN);
                b.setTitleBookSale(title);
                b.setTotalSales(sale);
                result.add(b);
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }

        return result;
    }

}
